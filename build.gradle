// Gradle plugins
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'sonatype-nexus-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            name = 'forge-repo'
            url = 'http://files.minecraftforge.net/maven/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.11.0"
    id "com.github.johnrengelman.shadow" version "1.1.2"
    id "java"
    id "maven"
    id "signing"
}

apply plugin: "forge"

// Project repositories
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus-public'
        url = 'https://oss.sonatype.org/content/repositories/public/'
    }
}

// Project dependencies
dependencies {
    compile 'com.flowpowered:flow-cerealization:0.1.0-SNAPSHOT'
    compile 'net.malisis:malisiscore:1.7.10-0.10.4-SNAPSHOT:dev'
}

// Gradle default tasks
defaultTasks 'licenseFormat', 'build', 'shadowJar'

// Basic project information
group = 'com.almuradev'
archivesBaseName = 'almura'
version = '1.7.10-SNAPSHOT'

// Extended project information
ext.projectName = 'Almura'
ext.inceptionYear = '2014'
ext.packaging = 'jar'
ext.url = 'http://github.com/AlmuraDev'
ext.description = 'The official mod for the Almura Minecraft Client and Server'
ext.organization = 'AlmuraDev'

// Define variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'

// Java version target/source compatibility
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

// Configuration settings
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // Always check for new snapshots
}

// MinecraftForge version
minecraft {
    version = "1.7.10-10.13.2.1277"
}

// Include dependencies in the final JAR
shadowJar {
    classifier = ''
    destinationDir = file("build/distributions")
    dependencies {
        include(dependency('com.flowpowered:flow-cerealization:0.1.0-SNAPSHOT'))
    }
}

// Filter, process, and include resources
processResources {
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    // Include in final JAR
    from 'LICENSE.txt'

    // Replace variables
    from('src/main/resources/mcmod.info') {
        expand 'modid': projectName,
               'name': projectName,
               'description': project.ext.description,
               'version': version,
               'buildNumber': buildNumber,
               'mcversion': minecraft.version,
               'url': url,
               'authorList': organization
    }
}

// Obfuscate based on the shaded jars content
reobf { reobf(file('build/distributions/' + archivesBaseName + '-' + version + '.jar')) {spec ->  spec.classpath = configurations.compile } }
reobf.dependsOn shadowJar

// License header formatting
license {
    ext.name = project.name
    ext.organization = organization
    ext.url = url
    ext.year = inceptionYear
    header rootProject.file('HEADER.txt')
    ignoreFailures true
    strictCheck true
    excludes(["**/*.cfg", "**/*.info", "**/*.jpg", "**/*.png", "**/*.yml", "**/*.json"])
}

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += [ '-Xlint:all', '-Xlint:-path' ]
    options.deprecation = true
    options.encoding = 'utf8'
}

// JAR manifest configuration
jar.manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url,
        "FMLCorePluginContainsFMLMod": 'true',
        "FMLCorePlugin": 'com.almuradev.almura.core.AlmuraCoreMod')


