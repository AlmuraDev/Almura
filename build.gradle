buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'sonatype-nexus-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            name = 'forge-repo'
            url = 'http://files.minecraftforge.net/maven/'
        }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

defaultTasks 'licenseFormat', 'build'

apply plugin: "forge"
apply plugin: "license"
apply plugin: "maven"
apply plugin: "signing"

group = 'com.almuradev'
archivesBaseName = 'almura'

ext.name = 'Almura'
ext.inceptionYear = '2014'
ext.packaging = 'jar'
ext.url = 'http://github.com/AlmuraDev'
ext.organization = 'AlmuraDev'
ext.mixinSrg = new File(project.buildDir, "tmp/mixins/mixins.almura.srg")
ext.mixinRefMap = new File(project.buildDir, "tmp/mixins/mixin.refmap.json")
ext.minecraftVersion = '1.7.10'
ext.forgeVersion = '10.13.4.1448'
version = minecraftVersion + '-' + forgeVersion.substring(forgeVersion.size() - 4)

reobf.addExtraSrgFile project.mixinSrg

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus-public'
        url = 'https://oss.sonatype.org/content/repositories/public/'
    }
    maven {
        name = 'sponge-public'
        url = 'http://repo.spongepowered.org/maven/'
    }
}

minecraft {
    version = project.ext.minecraftVersion + '-' + project.ext.forgeVersion + '-1.7.10'
    runDir = "run/"
    mappings = "stable_12"
}

dependencies {
    compile ('com.almuradev:almurasdk:1.7.10-1448-1-SNAPSHOT:dev') {
        transitive = true
    }
    compile ('com.almuradev:guide:1.7.10-1448-1-SNAPSHOT:dev') {
        transitive = true
    }
}

processResources {
    from 'LICENSE.txt'
}

license {
    ext.name = project.name
    ext.organization = organization
    ext.url = url
    ext.year = inceptionYear
    header rootProject.file('HEADER.txt')
    ignoreFailures true
    strictCheck true
    includes(["**/*.java"])
}

compileJava {
    options.compilerArgs += [
            '-Xlint:all',
            '-Xlint:-path',
            '-Xlint:-processing',
			"-AoutSrgFile=${project.mixinSrg.getCanonicalPath()}", 
            "-AoutRefMapFile=${project.mixinRefMap.getCanonicalPath()}" 
    ]
    options.deprecation = true
    options.encoding = 'utf8'
}

afterEvaluate {
    tasks.compileJava.options.compilerArgs += "-AreobfSrgFile=${tasks.reobf.srg}"
}

task copySrgs(type: Copy, dependsOn: "genSrgs") {
    from plugins.getPlugin("forge").delayedFile("{SRG_DIR}")

    include '**/*.srg'
    into 'build/srgs'
}

setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs

def manifestEntries = [
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version,
        "Implementation-Vendor": url,
        "FMLCorePluginContainsFMLMod": 'true',
        "FMLCorePlugin": 'com.almuradev.almura.core.AlmuraCoreMod'
]

jar {
    from project.mixinRefMap
    manifest.mainAttributes(manifestEntries)
}


if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}
