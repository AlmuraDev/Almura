// Default tasks
defaultTasks 'clean', 'build', 'licenseFormat'

// Apply plugin
apply plugin: 'forge'
apply plugin: 'license'
apply plugin: 'maven'
apply plugin: 'signing'

// Basic project information
group = 'com.almuradev'
archivesBaseName = 'almuramod'
version = '1.7.10-SNAPSHOT'

// Extended project information
ext.projectName = 'AlmuraMod'
ext.inceptionYear = '2014'
ext.packaging = 'jar'
ext.url = 'http://github.com/AlmuraDev'
ext.description = 'The official mod for Almura'
ext.organization = 'AlmuraDev'

// Define variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'

// Configuration settings
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // Always check for new snapshots
}

// MinecraftForge version
minecraft {
    version = "1.7.10-10.13.0.1208"
}

// Gradle repositories and dependencies
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'sonatype-nexus-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            name = 'forge-repo'
            url = 'http://files.minecraftforge.net/maven/'
        }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

// Project repositories
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus-public'
        url = 'https://oss.sonatype.org/content/repositories/public/'
    }
}

// Project dependencies
dependencies {}

// Filter, process, and include resources
processResources {
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    // Include in final JAR
    from 'LICENSE.txt'

    // Replace variables
    from('src/main/resources/mcmod.info') {
        expand 'modid': projectName,
                'name': projectName,
                'description': project.ext.description,
                'version': version,
                'buildNumber': buildNumber,
                'mcversion': minecraft.version,
                'url': url,
                'authorList': organization
    }
}

// License header formatting
license {
    ext.name = project.name
    ext.organization = organization
    ext.url = url
    ext.year = inceptionYear
    header rootProject.file('HEADER.txt')
    ignoreFailures true
    strictCheck true
    exclude "**/*.info"
    exclude "assets/**"
}

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += [ '-Xlint:all', '-Xlint:-path' ]
    options.deprecation = true
    options.encoding = 'utf8'
}

// JAR manifest configuration
jar.manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url)
