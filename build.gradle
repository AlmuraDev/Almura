buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven/'
        }
        maven {
            name = 'oss-sonatype-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
        classpath "net.minecraftforge.gradle:ForgeGradle:${project.forgeGradleVersion}"
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0'
        classpath 'org.spongepowered:mixingradle:0.6+'
        classpath 'org.spongepowered:spongegradle:0.5.+'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.spongepowered.gradle'
apply plugin: 'org.spongepowered.plugin'

defaultTasks 'clean', 'licenseFormat', 'sortAccessTransformers', 'sortClassFields', 'build'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

archivesBaseName = project.name.toLowerCase()
version = "${project.minecraftVersion}-${project.forgeBuild}-r${project.spongeAPIVersion.split("-")[0]}"

minecraft {
    version = "${project.forgeVersion}"
    mappings = project.mcpMappings
    runDir = 'run'
    useDepAts = true
    coreMod = project.coreMod

    // We don't use the obfuscated dev jar currently
    makeObfSourceJar = false
}

mixin {
    add sourceSets.main, "mixins.${project.name.toLowerCase()}.refmap.json"
}

deobfMcMCP { failOnAtError = false }
deobfMcSRG { failOnAtError = false }

repositories {
	mavenLocal()
    mavenCentral()
    maven {
        name = 'forge'
        url = 'http://files.minecraftforge.net/maven/'
    }
    maven {
        name = 'oss-sonatype-public'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name 'drnaylor-minecraft'
        url 'http://repo.drnaylor.co.uk/artifactory/list/minecraft'
    }
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
}

// Fix conflicts with HOCON library (SF requires 1.3.0)
configurations.all {
    resolutionStrategy {
        force 'com.typesafe:config:1.3.1'
    }
}

dependencies {
    compile ("org.spongepowered:spongeforge:${project.spongeImplVersion}:dev") {
        exclude module: 'testplugins'
    }
    compile 'net.kyori:indigo:1.0.0-SNAPSHOT'
    compile 'net.kyori:lunar:1.0.3'
    compile 'net.kyori:membrane:1.0.5'
    compile 'net.kyori:violet:1.0.0'
    deobfCompile ('net.malisis:malisiscore:1.12.2-6.3.1-SNAPSHOT') {
        transitive = false
    }
    compile 'ninja.leaping.configurate:configurate-json:3.3'
    compile 'com.almuradev:toolbox:1.0.0-SNAPSHOT'
    compile 'io.github.nucleuspowered:nucleus-api:1.2.0-PR5-S7.0'
}

idea {
    module {
        inheritOutputDirs = true
    }
}

license {
    ext.name = project.name
    ext.organization = project.organization
    ext.url = project.url
    header rootProject.file('HEADER.txt')
    ignoreFailures true
    strictCheck true
    include '**/*.java'
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

if (JavaVersion.current().isJava8Compatible() || JavaVersion.current().isJava9Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
    ]
    options.deprecation = true
    options.encoding = 'utf8'
}

jar {
    classifier 'base'

    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Created-By': System.properties['java.vm.version'] + ' (' + System.properties['java.vm.vendor'] + ')',
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Implementation-Vendor': url,
                'FMLAT': "${project.name.toLowerCase()}_at.cfg",
                'FMLCorePlugin': 'com.almuradev.almura.AlmuraLoadingPlugin',
                'FMLCorePluginContainsFMLMod': true,
                'ForceLoadAsMod': true,
                'MixinConfigs': "mixins.almura.core.json,mixins.almura.content.json,mixins.almura.title.json",
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0
        )
    }
}

shadowJar {
    mainSpec.sourcePaths.clear()
    dependsOn reobfJar
    classifier ''
    exclude 'dummyThing'
    relocate 'com.typesafe.config', 'configurate.typesafe.config'
    dependencies {
        include dependency('com.almuradev:toolbox')
        include dependency('com.fasterxml.jackson.core:jackson-core')
        include dependency('com.google.inject.extensions:guice-assistedinject')
        include dependency('com.google.inject.extensions:guice-multibindings')
        include dependency('io.github.nucleuspowered:nucleus-api')
        include dependency('net.kyori:indigo')
        include dependency('net.kyori:lunar')
        include dependency('net.kyori:membrane')
        include dependency('net.kyori:violet')
        include dependency('ninja.leaping.configurate:configurate-json')
        include dependency('io.github.nucleuspowered:nucleus-api')
    }
    afterEvaluate {
        from zipTree(reobfJar.jar)
    }
}

artifacts {
    archives shadowJar
}
