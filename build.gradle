import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven/'
        }
        maven {
            name = 'oss-sonatype-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
        classpath "net.minecraftforge.gradle:ForgeGradle:${project.forgeGradleVersion}"
        classpath "gradle.plugin.net.minecrell:licenser:0.4.1"
        classpath 'org.spongepowered:mixingradle:0.6+'
        classpath 'org.spongepowered:spongegradle:0.8.1'
        classpath 'nu.studer:gradle-jooq-plugin:3.0.2'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecrell.licenser'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.spongepowered.gradle'
apply plugin: 'org.spongepowered.plugin'
apply plugin: 'nu.studer.jooq'

defaultTasks 'clean', 'licenseFormat', 'sortAccessTransformers', 'sortClassFields', 'build'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

archivesBaseName = project.name.toLowerCase()
version = "mc[${project.minecraftVersion}]-forge[${project.forgeBuild}]-sf[${project.spongeImplVersion.split("-")[2]}]-b${project.internalBuild}"

minecraft {
    version = "${project.forgeVersion}"
    mappings = project.mcpMappings
    runDir = 'run'
    useDepAts = true
    coreMod = project.coreMod

    // We don't use the obfuscated dev jar currently
    makeObfSourceJar = false
}

mixin {
    add sourceSets.main, "mixins.${project.name.toLowerCase()}.refmap.json"
}

deobfMcMCP { failOnAtError = false }
deobfMcSRG { failOnAtError = false }

repositories {
	mavenLocal()
    mavenCentral()
    maven {
        name = 'forge'
        url = 'http://files.minecraftforge.net/maven/'
    }
    maven {
        name = 'oss-sonatype-public'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name 'drnaylor-minecraft'
        url 'http://repo.drnaylor.co.uk/artifactory/list/minecraft'
    }
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
    maven {
        name = 'bstats'
        url = 'https://repo.codemc.org/repository/maven-public'
    }
    maven {
        url = "https://raw.githubusercontent.com/FabioZumbi12/UltimateChat/mvn-repo"
    }
    maven {
        name = "LuckPerms"
        url = "https://repo.lucko.me/"
    }
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
    maven {
        name = 'glare'
        url = 'https://repo.glaremasters.me/repository/bloodshot'
    }
    flatDir {
        dirs "lib"
    }
}

configurations.all {
    resolutionStrategy {
        force 'com.typesafe:config:1.3.1'
    }
}

dependencies {
    compile ("org.spongepowered:spongeforge:${project.spongeImplVersion}:dev") {
        exclude module: 'testplugins'
	    exclude module: 'testmods'
    }
    compile 'net.kyori:indigo:1.0.0-SNAPSHOT'
    compile 'net.kyori:lunar:1.0.5-SNAPSHOT'
    compile 'net.kyori:membrane:1.0.5'
    compile 'net.kyori:violet:1.0.0'
    compile 'net.kyori:text-api:3.0.2'
    compile 'net.kyori:text-serializer-legacy:3.0.4'
    compile 'net.kyori:event-api:3.0.0'
    compile 'net.kyori:event-method:3.0.0'
    compile ("com.github.bloodmc:GriefDefenderAPI:master-SNAPSHOT") {
        exclude module: 'event-method-asm'
    }
    deobfCompile ('com.almuradev:malisiscore:1.12.2-6.5.3-SNAPSHOT') {
        transitive = false
    }
    //compile 'br.net.fabiozumbi12.UltimateChat:UltimateChat-Sponge-7:1.8.9'
    compile 'br.net.fabiozumbi12.UltimateChat:UltimateChat-Sponge-56-1.9.1'
    compile 'org.spongepowered:configurate-json:3.5'
    compile 'org.inspirenxe:skills:1.0.0-SNAPSHOT:api'
    compile 'com.almuradev:toolbox:1.0.0-SNAPSHOT'
    compile 'org.inspirenxe:skills:1.0.0-SNAPSHOT'
    compile 'io.github.nucleuspowered:nucleus-api:1.14.6-S7.1'
    compile "net.luckperms:api:5.0"
    //compile 'me.ryanhamshire:griefprevention:1.12.2-4.5.5.0'
    compile "org.jooq:jooq:${project.jooqVersion}"
    compile "org.jooq:jooq-meta:${project.jooqVersion}"
    compile "org.jooq:jooq-codegen:${project.jooqVersion}"
    jooqRuntime "org.jooq:jooq-meta-extensions:${project.jooqVersion}"
    testCompile 'junit:junit:4.12'
}

license {
    header = project.file('header.txt')

    include 'com/almuradev/'
    exclude 'com/almuradev/generated'

    tasks {
        main {
            files = project.files('src/main/java')
        }
    }

    newLine false
}

idea {
    module {
        inheritOutputDirs = true
    }
}

if (JavaVersion.current().isJava8Compatible() || JavaVersion.current().isJava9Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
    ]
    options.deprecation = true
    options.encoding = 'utf8'
}

processResources {
    filesMatching('**/mcmod.info') {
        filter ReplaceTokens, tokens: [
            'build': project.internalBuild,
            'minecraftVersion': project.minecraftVersion
        ]
    }
}

test {
    testLogging {
        exceptionFormat = 'full' // Always print full stack trace if something goes wrong in the unit tests
        showStandardStreams = true
    }
}

jar {
    classifier 'base'
    exclude 'log4j2-test.xml'

    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Created-By': System.properties['java.vm.version'] + ' (' + System.properties['java.vm.vendor'] + ')',
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Implementation-Vendor': url,
                'FMLAT': "${project.name.toLowerCase()}_at.cfg",
                'FMLCorePlugin': 'com.almuradev.almura.AlmuraLoadingPlugin',
                'FMLCorePluginContainsFMLMod': true,
                'ForceLoadAsMod': true,
                'MixinConfigs': [
                        'mixins.almura.core.json',
                        "mixins.almura.accessors.json",
                        'mixins.almura.content.json',
                        'mixins.almura.content.block.json',
                        'mixins.almura.content.block.horizontal.json',
                        'mixins.almura.content.blocksoundgroup.json',
                        'mixins.almura.content.item.food.json',
                        'mixins.almura.content.item.json',
                        'mixins.almura.content.item.seed.json',
                        'mixins.almura.content.itemgroup.json',
                        'mixins.almura.content.mapcolor.json',
                        'mixins.almura.content.material.json',
                        'mixins.almura.feature.animal.json',
                        'mixins.almura.feature.cache.json',
                        'mixins.almura.feature.healthbar.json',
                        'mixins.almura.feature.almanac.json',
                        'mixins.almura.feature.sign.json',
                        'mixins.almura.feature.title.json',
                        'mixins.almura.feature.biome.json',
                        'mixins.almura.feature.nick.json'
                ].join(','),
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0
        )
    }
}

shadowJar {
    mainSpec.sourcePaths.clear()
    dependsOn reobfJar
    classifier ''
    exclude 'dummyThing'
    relocate 'com.typesafe.config', 'configurate.typesafe.config'
    //relocate 'net.kyori.event', 'almura.kyori.event'
    dependencies {
        include dependency('com.almuradev:toolbox')
        include dependency('com.fasterxml.jackson.core:jackson-core')
        include dependency('com.google.inject.extensions:guice-assistedinject')
        include dependency('com.google.inject.extensions:guice-multibindings')
        include dependency('io.github.nucleuspowered:nucleus-api')
        include dependency('net.kyori:indigo')
        include dependency('net.kyori:event-api')
        include dependency('net.kyori:event-method')
        include dependency('net.kyori:text-api')
        include dependency('net.kyori:text-serializer-legacy')
        include dependency('net.kyori:lunar')
        include dependency('net.kyori:membrane')
        include dependency('net.kyori:violet')
        include dependency('ninja.leaping.configurate:configurate-json')
        include dependency('io.github.nucleuspowered:nucleus-api')
        include dependency('org.jooq:jooq')
        include dependency('com.github.bloodmc:GriefDefenderAPI')
    }
    afterEvaluate {
        from zipTree(reobfJar.jar)
    }
}

artifacts {
    archives shadowJar
}

def generatedDir = 'src/main/generated'
sourceSets {
    main {
        java {
            srcDirs += [generatedDir]
        }
    }
}

task generateDatabaseClasses() {}

task cleanDatabaseClasses() {
    doLast {
        project.file(generatedDir).deleteDir()
    }
}

jooq {
    version = project.jooqVersion
    edition = project.jooqEdition
    axsDdl(sourceSets.main) {
        generator {
            database {
                name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                properties {
                    property {
                        key = 'scripts'
                        value = 'src/main/resources/db/axs/database.sql'
                    }
                }

                inputSchema = 'PUBLIC'
                outputSchemaToDefault = true
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = false
                fluentSetters = true
            }
            target {
                packageName = 'com.almuradev.generated.axs'
                directory = generatedDir
            }
        }
    }
    storeDdl(sourceSets.main) {
        generator {
            database {
                name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                properties {
                    property {
                        key = 'scripts'
                        value = 'src/main/resources/db/store/database.sql'
                    }
                }

                inputSchema = 'PUBLIC'
                outputSchemaToDefault = true
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = false
                fluentSetters = true
            }
            target {
                packageName = 'com.almuradev.generated.store'
                directory = generatedDir
            }
        }
    }
    titleDdl(sourceSets.main) {
        generator {
            database {
                name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                properties {
                    property {
                        key = 'scripts'
                        value = 'src/main/resources/db/title/database.sql'
                    }
                }

                inputSchema = 'PUBLIC'
                outputSchemaToDefault = true
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = false
                fluentSetters = true
            }
            target {
                packageName = 'com.almuradev.generated.title'
                directory = generatedDir
            }
        }
    }
}

generateDatabaseClasses.dependsOn 'generateAxsDdlJooqSchemaSource'

generateAxsDdlJooqSchemaSource.dependsOn 'cleanDatabaseClasses'

project.tasks.getByName('compileJava').dependsOn -= 'generateAxsDdlJooqSchemaSource'

generateDatabaseClasses.dependsOn 'generateStoreDdlJooqSchemaSource'

generateStoreDdlJooqSchemaSource.dependsOn 'cleanDatabaseClasses'

project.tasks.getByName('compileJava').dependsOn -= 'generateStoreDdlJooqSchemaSource'

generateDatabaseClasses.dependsOn 'generateTitleDdlJooqSchemaSource'

generateTitleDdlJooqSchemaSource.dependsOn 'cleanDatabaseClasses'

project.tasks.getByName('compileJava').dependsOn -= 'generateTitleDdlJooqSchemaSource'
